* Open Data Map

 1. Import shapes onto a map by dragging and dropping geoJSON, topoJSON or Shapefile, along with data describing attributes of those shapes as tsv.
 2. Manipulate the data using simple formulae and lookup tables, or by writing very small computer programs.
 3. Colour the map using the data.
 4. Share the results as a web page or pdf.
 5. Build upon other people's shared work.

** Running
  * Clone this git repository, then change directory to its root.
  * git submodule init
  * git submodule update
  * Build leaflet.js (TODO: make this step less annoying)
    * Install node.js (http://nodejs.org/ or sudo aptitude install nodejs)
    * sudo npm install -g jake
    * sudo npm install -g jshint
    * sudo npm install -g uglify-js
    * cd /lib/leaflet
    * jake build
    * cd ../..
  * python3 toTopoJson.py (dependencies listed in file).
  * sudo python3 -m http.server 80 &
  * Open prototype.html in a browser (TODO: change to index.html).
    
* Technology
We are drawing the map in D3 using vectors and SVG.

We want to try to push a lot of the work out to the client side (that is, in the user's browser).

Working from this example http://bl.ocks.org/mbostock/5616813.


* TODO Postcodes
There is the Python file postcodes.py which should takes a zip of postcodes and makes up some boundaries for those postcodes based on their Easting and Northing and the LSOA which contains them. It is unfinished.

*** DONE Tesselation
We've used a Voronoi tesselation from Scipy on the postcodes.
http://cgm.cs.mcgill.ca/~mcleish/644/Projects/DerekJohns/Sweep.htm
http://docs.scipy.org/doc/scipy/reference/tutorial/spatial.html

*** Performance
There are about 35,000 LSOAs.
30,000 LSOAs have 10 < postcodes < 100.
Around 3000 LSOAs have 100 < postcodes < 500
Approx. 100 LSOAs have 500 < postcodes.
There's 1 unknown LSOA with a massive amount.

Obviously I didn't add that up right, but these are rough.

Smaller LSOAs do appear to have simpler geometries.

Tesselation + geojson output seems to do a few hundred a second, so assume it would take a minute or two to run them all.

*** Load LSOA data
We need to convert the LSOA shapefile to a geojson file projected using OS Map, so that we can use the boundaries.

Find the code which we need (something like L9999999)

Go through the collection and put all the features in a map.

Make the changes to some of them.

Turn the map back into a list and write it back out.


*** Eliminate postcodes which aren't really in the LSOA
These can't work.

*** Intersect with LSOA boundary
The output of the voronoi tesselation includes infinite points, which we need to eliminate. It may also generate finite points which are outside of the LSOA.

For each ridge, we know which cell is to its left and right, and can therefore work out which direction the infinite point should be.

A possible algorithm is the wall-crawl technique (also useful for exploring dungeons):
 + Build truncated ridges R' and intersections I using the LSOA boundary B.
 + Make a map of R' -> I.
 + Make a map of cells C -> R'
 + For each c in C, build a path as follows:
  - Take a ridge r from R' which has the cell to its right.
  - End of r, turn onto either another ridge or an arc.
    - If there are multiple possible choices at a turn, there will be exactly one ridge which borders c.
  - Follow round until we get back to r.

**** Special cases
For cases where there are 1 or 2 postcodes in an LSOA, we can take a simpler approach since we know the ridges will never intersect.

*** Add intersections to LSOAs
We have a list of intersections between postcodes and LSOAs. We need to add this to the LSOA geometry.

This will allow the topojson to understand that the LSOAs and postcodes share some arcs.

*** Convert to topojson
Once we've generated our geojson, we need to project it into the same format as the other geojson files.

We can then include it when we topojson everything together at the end.

gi
